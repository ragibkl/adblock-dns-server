tlsEnabled=os.getenv('TLS_ENABLED')
backendPort=os.getenv('BACKEND_PORT')
port=os.getenv('PORT')

-- upstream resolver
newServer({
    address=string.format('127.0.0.1:%s', backendPort),
    name='resolver1',
    healthCheckMode='up',
})

-- allow query from all IP addresses
setACL({ '0.0.0.0/0', '::/0' })

-- add a DNS resolver listening on port 53 of all interfaces
setLocal(string.format('0.0.0.0:%s', port), { reusePort=true })
addLocal(string.format('[::]:%s', port), { reusePort=true })

if tlsEnabled == 'true' then
    certFile='/data/certs/fullchain.pem'
    keyFile='/data/certs/privkey.pem'

    -- add a DoH resolver listening on port 443 of all interfaces
    addDOHLocal('0.0.0.0:443', certFile, keyFile, { '/', '/dns-query' }, { doTCP=true, reusePort=true, tcpFastOpenSize=0 })
    addDOHLocal('[::]:443', certFile, keyFile, { '/', '/dns-query' }, { doTCP=true, reusePort=true, tcpFastOpenSize=0 })

    -- add a DoT resolver listening on port 853 of all interfaces
    addTLSLocal('0.0.0.0', certFile, keyFile)
    addTLSLocal('[::]', certFile, keyFile)
end

-- add a local control socket
controlSocket('127.0.0.1')
setKey('miQjUydO7fwUmSDS0hT+2pHC1VqT8vOjfexOyvHKcNA=')

-- add logging target to dnstap
dnstap=newFrameStreamUnixLogger('/var/run/dnstap/dnstap.sock')
addResponseAction(AllRule(), DnstapLogResponseAction('dns', dnstap))

-- rate limit
addAction(MaxQPSIPRule(10, 32, 48), DropAction())
